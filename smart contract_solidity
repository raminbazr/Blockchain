// Hadcoin ico
//version of compiler
pragma solidity ^0.4.11;

contract hadcoin_ico {
    //introducing the maximum number of Hadcoin available for sale
    uint public max_Hadcoin = 1000000;

    // introducing the USD to Hadcoin conversion rate
    uint public USD_to_Hadcoin = 1000;
     
    //introducing the total number of Hadcoin that have been bought by investors
    uint public total_Hadcoin_bought = 0;

    //Mapping from the investor address to its equity in Hadcoin and USD
    mapping(address => uint) equity_Hadcoin; 
    mapping(address => uint) equity_USD;

    //cheking if an investor can buy Hadcoin
    modifier can_buy_Hadcoin (uint USD_invested){
        require (USD_invested * USD_to_Hadcoin + total_Hadcoin_bought <= max_Hadcoin);
        _;
    }

    //getting the equity in Hadcoin of investor
    function equiyt_in_Hadcoin (address investor) external constant returns (uint) {
        return equity_Hadcoin [investor];
    }

    //getting the equity in USD of investor
    function equiyt_in_USD (address investor) external constant returns (uint) {
        return equity_USD [investor];
    }

    //Buying Hadcoin
    function Buy_Hadcoin (address investor , uint USD_invested) external
    can_buy_Hadcoin (USD_invested) {
        uint Hadcoin_bought = USD_invested * USD_to_Hadcoin;
        equity_Hadcoin[investor] += Hadcoin_bought;
        equity_USD [investor] = equity_Hadcoin [investor]/1000;
        total_Hadcoin_bought += Hadcoin_bought; 
    }

    //Selling Hadcoin
    function Sell_Hadcoin (address investor , uint Hadcoin_sold) external {
        equity_Hadcoin[investor] += Hadcoin_sold ;
        equity_USD [investor] = equity_Hadcoin [investor]/1000;
        total_Hadcoin_bought += Hadcoin_sold; 
    }   
}

